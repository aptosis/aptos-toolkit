initSidebarItems({"enum":[["AddConstraintError","The possible error conditions that `Solver::add_constraint` can fail with."],["AddEditVariableError","The possible error conditions that `Solver::add_edit_variable` can fail with."],["RelationalOperator","The possible relations that a constraint can specify."],["RemoveConstraintError","The possible error conditions that `Solver::remove_constraint` can fail with."],["RemoveEditVariableError","The possible error conditions that `Solver::remove_edit_variable` can fail with."],["SuggestValueError","The possible error conditions that `Solver::suggest_value` can fail with."],["WeightedRelation","This is part of the syntactic sugar used for specifying constraints. This enum should be used as part of a constraint expression. See the module documentation for more information."]],"mod":[["strength","Contains useful constants and functions for producing strengths for use in the constraint solver. Each constraint added to the solver has an associated strength specifying the precedence the solver should impose when choosing which constraints to enforce. It will try to enforce all constraints, but if that is impossible the lowest strength constraints are the first to be violated."]],"struct":[["Constraint","A constraint, consisting of an equation governed by an expression and a relational operator, and an associated strength."],["Expression","An expression that can be the left hand or right hand side of a constraint equation. It is a linear combination of variables, i.e. a sum of variables weighted by coefficients, plus an optional constant."],["PartialConstraint","This is an intermediate type used in the syntactic sugar for specifying constraints. You should not use it directly."],["Solver","A constraint solver using the Cassowary algorithm. For proper usage please see the top level crate documentation."],["Term","A variable and a coefficient to multiply that variable by. This is a sub-expression in a constraint equation."],["Variable","Identifies a variable for the constraint solver. Each new variable is unique in the view of the solver, but copying or cloning the variable produces a copy of the same variable."]]});